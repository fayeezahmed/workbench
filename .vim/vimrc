if &compatible


end


if has('python3') && !has('patch-8.1.201') 
  silent! python3 1
endif

syntax on
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

set rtp+=~/.vim/bundle/Vundle.vim/
cal vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-surround'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdtree'
Plugin 'tmux/tmux'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'itchyny/lightline.vim'
Plugin 'universal-ctags/ctags'
Plugin 'vimwiki/vimwiki'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'

" Syntax highlighting start
Plugin 'pangloss/vim-javascript'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'mhartington/oceanic-next'
Plugin 'othree/javascript-libraries-syntax.vim'
" Syntax highglighting end

Plugin 'christoomey/vim-conflicted'
Plugin 'mileszs/ack.vim'

" Snipmate stuff start
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
" Snipmate stuff end

Plugin 'ryanoasis/vim-devicons'
call vundle#end()            " required
filetype on

"" Font
""set guifont=JetBrains_Mono
set encoding=utf-8

let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1

augroup javascript_folding
    au!
    au FileType javascript setlocal foldmethod=syntax 
    au FileType javascript setlocal foldlevel=99
augroup END

" Color scheme setup
let g:vim_jsx_pretty_colorful_config = 1
let g:used_javascript_libs = 'underscore,backbone,react,d3,jasmine,chai'
syntax enable
" for vim 7
 set t_Co=256

" for vim 8
 if (has("termguicolors"))
  set termguicolors
 endif

colorscheme OceanicNext
let g:airline_theme='oceanicnext'

set tabstop=4 shiftwidth=4 expandtab
set softtabstop=4
"set number
set relativenumber
set path+=~/dazn/catalog-web-chapter/**
set suffixesadd=.js,.jsx
set bs=2
set hlsearch

" Start autocompletion after 4 chars
let g:ycm_min_num_of_chars_for_completion = 4
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_enable_diagnostic_highlighting = 0

" Don't show YCM's preview window 
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0

" ###### CTRLP options ######
"" Remap ctrlp to easier shortcut
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"" Ignore typical files from search
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
"" Ignore all those in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
"" Open file in a new buffer if file already open
let g:ctrlp_switch_buffer = 'et'
" ctags optimization
set autochdir
set tags=tags;
let g:ctrlp_match_window = 'results:25'
"""VIM WIKI HTML TEMPLATE"""

""let g:vimwiki_list = [{
""  \ 'path': '~/vimwiki/',
""  \ 'template_path': '~/vimwiki/templates/',
""  \ 'template_default': 'default',
""  \ 'template_ext': '.html'}]

"""ALE - ESLINT"""
"" Auto fix files on save
let g:ale_fix_on_save = 0
"" map ALENext and ALEPrevious to \ak and \aj respectively, \ is the leader
nmap <silent> <leader>ak :ALENext<cr>
nmap <silent> <leader>aj :ALEPrevious<cr>

"" Vim cursor
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
endif

"" Macros
"" Boilerplate java class with main method - no imports
let @j = 'ipublic class MyClass {	public static void main(String[€kr args€kr{		// Stuff goes here, change the class name and te€kbhe s€kbarguments'

"" More natural splitting
set splitbelow
set splitright

"" Ag / ack
""let g:ackprg = 'ag --vimgrep --smart-case'
""cnoreabbrev ag Ack
""cnoreabbrev aG Ack
""cnoreabbrev Ag Ack
""cnoreabbrev AG Ack

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""" MACROS """""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
"" COMMENTING OUT CSS
let @c="I/* \<Esc>A */\<Esc>"
let @v="^3x$2h3x"
let @r="impor€kb€kb€kb€kbimport React from 'react€kr;import€kb€kb€kb€kb€kb€kbfunction Component(€kr {cos€kbnst €kb€kb€kb€kb€kb€kbfun€kb€kb€kb€kb€kb	€kbreturn (	d€kb>di€kb€kb€kb<div>	€kb</div€ku€kd>€ku€kl class€kb€kb€kb€kb€kbdata-testid='COMPOEN€kb€kbNENTjjjoexport default Component;:€kb"
let @h='i<!doctype html><html lang="en€kr><head><meta charset="utf-8€kr><title> Standard HM€kbTML</title><meta name="description€kr cib€kb€kbontent €kb="HTL€kbML5 Standard€kr><meta a€kbname="author€kr content="Fayeez Ahmed€kr><link rel="stylesheet€kr href="css//€kbstyles.css?v=1.0€kr>€kb<h€kb.€kb/head><body><scrp€kbipt src="script.js>/€kb</script>€kb</body>€kb</html>'
""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""WINDOWS"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
"" WINDOWS STUFF - comment out on Mac or linux
if (&term =~ 'xterm' && &t_Co == 256)
    set t_ut= | set ttyscroll=1
endif

"" Lightline colorscheme
let g:lightline = {
      \ 'colorscheme': 'OceanicNext',
      \ }


