if &compatible


end


if has('python3') && !has('patch-8.1.201') 
  silent! python3 1
endif

syntax on
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete
set laststatus=2

""""""""""""""""""""""""""""""""""
"" PLUGIN MANAGER - VIM-PLUG START
""""""""""""""""""""""""""""""""""
"" Install if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-surround'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdtree'
Plug 'ternjs/tern_for_vim'
Plug 'itchyny/lightline.vim'
Plug 'universal-ctags/ctags'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'prettier/vim-prettier'
Plug 'metakirby5/codi.vim'
Plug 'mattn/emmet-vim'

"" Autocomplete
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
let g:deoplete#enable_at_startup = 1

"" Intellisense
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"Syntax highlighting start
Plug 'maxmellon/vim-jsx-pretty'
Plug 'mhartington/oceanic-next'
Plug 'othree/yajs.vim'
Plug 'othree/html5.vim'
Plug 'othree/javascript-libraries-syntax.vim'
" Syntax highglighting end

Plug 'christoomey/vim-conflicted'
Plug 'ryanoasis/vim-devicons'

call plug#end()
""""""""""""""""""""""""""""""""""
"" PLUGIN MANAGER - VIM-PLUG END
""""""""""""""""""""""""""""""""""

" Font
""set guifont=JetBrains_Mono
set encoding=utf-8
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let NERDTreeShowHidden=1
let g:prettier#autoformat=0

autocmd BufWritePre *.js,*.json,*.css,*.scss,*.less,*.graphql Prettier
augroup javascript_folding
    au!
    au FileType javascript setlocal foldmethod=syntax 
    au FileType javascript setlocal foldlevel=99
augroup END

" Color scheme setup
let g:vim_jsx_pretty_colorful_config = 1
let g:used_javascript_libs = 'underscore,backbone,react,d3,jasmine,chai'
syntax enable
" for vim 8
set t_Co=256
 if (has("termguicolors"))
  set t_Co=256
  set termguicolors
 endif
 if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  set t_ut=
endif
let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 0
colorscheme OceanicNext
let g:lightline_theme='oceanicnext'
"" Modified to 2 spaces from: https://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces
set tabstop=4 softtabstop=0 expandtab shiftwidth=2 smarttab
set number
""set relativenumber
set path+=~/dazn/catalog-tv-chapter/**
set suffixesadd=.js,.jsx
set bs=2
set hlsearch

" Start autocompletion after 4 chars
let g:ycm_min_num_of_chars_for_completion = 4
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_enable_diagnostic_highlighting = 0
""let g:ycm_max_num_candidates = 25

" Don't show YCM's preview window 
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 1

" ###### CTRLP options ######
"" Remap ctrlp to easier shortcut
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"" Ignore typical files from search
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
"" Ignore all those in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
"" Open file in a new buffer if file already open
let g:ctrlp_switch_buffer = 'et'
" ctags optimization
set autochdir
set tags=tags;
let g:ctrlp_match_window = 'results:25'
"""VIM WIKI HTML TEMPLATE"""

""let g:vimwiki_list = [{
""  \ 'path': '~/vimwiki/',
""  \ 'template_path': '~/vimwiki/templates/',
""  \ 'template_default': 'default',
""  \ 'template_ext': '.html'}]

"""ALE - ESLINT"""
"" Auto fix files on save
let g:ale_fix_on_save = 0
"" map ALENext and ALEPrevious to \ak and \aj respectively, \ is the leader
nmap <silent> <leader>ak :ALENext<cr>
nmap <silent> <leader>aj :ALEPrevious<cr>

"" Vim cursor
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
endif

"" Macros
"" Boilerplate java class with main method - no imports
let @j = 'ipublic class MyClass {	public static void main(String[€kr args€kr{		// Stuff goes here, change the class name and te€kbhe s€kbarguments'

"" More natural splitting
set splitbelow
set splitright

""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""" MACROS """""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
"" CSS commenting
let @c="I/* \<Esc>A */\<Esc>"
let @v="^3x$2h3x"
"" React boilerplate
let @r="impor€kb€kb€kb€kbimport React from 'react€kr;import€kb€kb€kb€kb€kb€kbfunction Component(€kr {cos€kbnst €kb€kb€kb€kb€kb€kbfun€kb€kb€kb€kb€kb	€kbreturn (	d€kb>di€kb€kb€kb<div>	€kb</div€ku€kd>€ku€kl class€kb€kb€kb€kb€kbdata-testid='COMPOEN€kb€kbNENTjjjoexport default Component;:€kb"
"" HTML boilerplate
let @h="i<!DOCTYPE html><html lang=\"en€kr><head><meta charset=\"utf-8€kr><title> Standard HTML</title><meta name=\"description€kr cib€kb€kbontent €kb=\"HTML5 Standard€kr><meta a€kbname=\"author€kr content=\"Fayeez Ahmed€kr><link rel=\"stylesheet€kr href=\"css//€kbstyles.css?v=1.0€kr>€kb<h€kb.€kb/head><body><scrp€kbipt src=\"script.js\"></script>€kb</body>€kb</html>\<Esc>"
    
"""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""WINDOWS"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
"" WINDOWS STUFF - comment out on Mac or linux
if (&term =~ 'xterm' && &t_Co == 256)
    set t_ut= | set ttyscroll=1
endif

"" Lightline colorscheme
let g:lightline = {
      \ 'colorscheme': 'oceanicnext',
      \ }


